id: SBT
name: SBT (Scala build tool)
group: build-tools
requires: java-version
description: Simple Build Tool - Interactive build tool for Scala and Java (Note: Requires Java 17 or older when using Nexus cached version)
installation:
  dockerfile: |
    # Pass Nexus configuration to this build stage
    ARG USE_NEXUS_APT
    ARG NEXUS_APT_URL
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y apt-transport-https curl gnupg && \
        mkdir -p /etc/apt/trusted.gpg.d && \
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | tee /etc/apt/trusted.gpg.d/sbt.asc && \
        if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then \
            echo "deb ${NEXUS_APT_URL}/repository/sbt-apt-proxy/ /" | tee /etc/apt/sources.list.d/sbt.list; \
        else \
            echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list && \
            echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list; \
        fi && \
        apt-get update && \
        apt-get install -y sbt && \
        rm -rf /var/lib/apt/lists/*
  nexus_config: |
    if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then \
        mkdir -p /etc/skel/.sbt && \
        echo "[repositories]" > /etc/skel/.sbt/repositories && \
        echo "local" >> /etc/skel/.sbt/repositories && \
        echo "nexus: ${NEXUS_APT_URL}/repository/maven-public/" >> /etc/skel/.sbt/repositories && \
        echo "" >> /etc/skel/.bashrc && \
        echo "# Coursier configuration for Nexus" >> /etc/skel/.bashrc && \
        echo "export COURSIER_REPOSITORIES=\"${NEXUS_APT_URL}/repository/maven-public/\"" >> /etc/skel/.bashrc && \
        echo "# Force SBT to use only configured repositories" >> /etc/skel/.bashrc && \
        echo "export SBT_OPTS=\"-Dsbt.override.build.repos=true\"" >> /etc/skel/.bashrc; \
    fi
  test_command: sbt --version
entrypoint_setup: |
  # SBT specific setup
  echo "Setting up SBT environment..."
  
  # Create .sbt directories
  mkdir -p /home/devuser/.sbt
  mkdir -p /home/devuser/.sbt/0.13
  mkdir -p /home/devuser/.sbt/1.0
  mkdir -p /home/devuser/.sbt/boot
  
  # Handle SBT repositories file from ConfigMap mount
  if [ -f /home/devuser/.sbt/repositories ]; then
      # Check if it's a mount point (ConfigMap)
      if mountpoint -q /home/devuser/.sbt/repositories 2>/dev/null || [ ! -w /home/devuser/.sbt/repositories ]; then
          echo "Found mounted .sbt/repositories file, creating writable copy..."
          # Copy to a different location
          cp /home/devuser/.sbt/repositories /home/devuser/.sbt/repositories.writable
          # Update the SBT_OPTS to use the writable copy
          export SBT_OPTS="-Dsbt.override.build.repos=true -Dsbt.repository.config=/home/devuser/.sbt/repositories.writable"
      fi
  fi
  
  # Always ensure SBT directories are owned by devuser
  chown -R devuser:devuser /home/devuser/.sbt 2>/dev/null || true
memory_content: |
  #### SBT
  
  **Quick Start**: `sbt new scala/scala3.g8` or `sbt new scala/hello-world.g8`
  
  **Interactive Mode** (type `sbt`):
  - `compile` - Compile sources
  - `run` - Run main class
  - `test` - Run tests
  - `~test` - Watch mode (auto-rerun)
  - `console` - Scala REPL with project
  
  **Testing**:
  - Specific test: `testOnly com.example.MySpec`
  - Test quick: `testQuick` (only changed)
  - Continuous: `~test`
  
  **build.sbt**:
  ```scala
  lazy val root = project.in(file("."))
    .settings(
      name := "myapp",
      scalaVersion := "3.3.1",
      libraryDependencies += "org.scalatest" %% "scalatest" % "3.2.17" % Test
    )
  ```
  
  **Commands**: `clean`, `package`, `publishLocal`, `dependencyTree`
  
  **Common Issues**: Binary compatibility â†’ check Scala version alignment
