# components/agents/claude-code.yaml
id: CLAUDE_CODE
name: Claude Code (AI Assistant)
group: ai-agents
requires: nodejs-version
description: Anthropic's AI coding assistant for development
pre_build_script: claude-code-setup.sh
installation:
  dockerfile: |
    # Claude Code requires Node.js to be installed first
    # The build system should ensure nodejs-version components are installed before this
    
    # Install Claude Code globally as root first
    RUN export NPM_CONFIG_PREFIX=/home/devuser/.npm-global && \
        export PATH="/home/devuser/.npm-global/bin:/usr/local/bin:${PATH}" && \
        mkdir -p /home/devuser/.npm-global && \
        chown -R devuser:devuser /home/devuser/.npm-global && \
        /usr/local/bin/npm install -g @anthropic-ai/claude-code && \
        ls -la /home/devuser/.npm-global/bin/ && \
        /home/devuser/.npm-global/bin/claude --version || (echo "Claude Code installation failed" && exit 1) && \
        chown -R devuser:devuser /home/devuser/.npm-global
  inject_files:
    - source: CLAUDE.md
      destination: /tmp/CLAUDE.md
      permissions: 644
    - source: claude-settings.json.template
      destination: /tmp/claude-settings.json.template
      permissions: 644
entrypoint_setup: |
  # Claude Code specific setup
  echo "Setting up Claude Code environment..."
  
  # Create .claude directory for global Claude configuration
  if command -v claude &> /dev/null 2>&1 || [ -f /tmp/CLAUDE.md ]; then
      mkdir -p /home/devuser/.claude
  fi
  
  # Copy settings.json from template if it exists
  echo "Checking for settings.json..."
  if [ -f /tmp/claude-settings.json.template ]; then
      echo "Found /tmp/claude-settings.json.template"
      if [ ! -f /home/devuser/.claude/settings.json ]; then
          echo "Copying settings.json to .claude folder..."
          cp /tmp/claude-settings.json.template /home/devuser/.claude/settings.json
          echo "settings.json copied successfully to /home/devuser/.claude/"
      else
          echo "settings.json already exists in .claude folder"
      fi
  else
      echo "No /tmp/claude-settings.json.template found in image"
  fi
  
  # Copy CLAUDE.md to .claude folder if it exists
  echo "Checking for CLAUDE.md..."
  if [ -f /tmp/CLAUDE.md ]; then
      echo "Found /tmp/CLAUDE.md"
      if [ ! -f /home/devuser/.claude/CLAUDE.md ]; then
          echo "Copying CLAUDE.md to .claude folder..."
          cp /tmp/CLAUDE.md /home/devuser/.claude/CLAUDE.md
          echo "CLAUDE.md copied successfully to /home/devuser/.claude/"
      else
          echo "CLAUDE.md already exists in .claude folder"
      fi
  else
      echo "No /tmp/CLAUDE.md found in image"
  fi
  
  # Ensure proper ownership
  chown -R devuser:devuser /home/devuser/.claude 2>/dev/null || true
  
  # Verify installed components (only if expected)
  if command -v claude &> /dev/null 2>&1; then
      echo "Claude Code is available at: $(which claude)"
  fi
memory_content: |
  #### Claude Code (AI Assistant)
  
  **Getting Started**:
  - Start Claude Code: `claude`
  - Open with file: `claude myfile.py`
  - Show help: `claude --help`
  
  **Features**:
  - AI-powered code completion and generation
  - Multi-file context awareness
  - Natural language to code translation
  - Code explanation and debugging help
  - Refactoring suggestions
  
  **Configuration**:
  - Settings stored in `~/.claude/`
  - Global settings in `~/.claude/settings.json`
  - See `~/.claude/CLAUDE.md` for environment-specific guidelines
  
  **Development Workflow Best Practices**:
  1. **Test as you build**: Run tests immediately after creating them
  2. **Use relative paths**: Navigate with `cd ../` instead of absolute paths
  3. **Verify dependencies**: Check compatibility before adding to projects
  4. **Document blockers**: Keep notes on issues for future reference
  
  **Common Workflow Pattern**:
  ```bash
  # 1. Create feature branch
  git checkout -b feat/new-feature
  
  # 2. Develop and test iteratively
  # Write code -> Test immediately -> Fix issues
  
  # 3. Create PR with auto-merge
  gh pr create --title "feat: description" --body "Details"
  gh pr merge --auto --squash --delete-branch
  ```
  
  **Tips**:
  - Claude Code understands your installed tools
  - Ask for help with any language/framework in your environment
  - Use for learning new technologies
  - Great for writing tests and documentation
  - Leverage expect scripts for testing interactive programs
