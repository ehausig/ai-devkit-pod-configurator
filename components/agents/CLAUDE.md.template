# Development Guidelines

## Communication
Be conversational and helpful, providing clear explanations for decisions. Stay concise while maintaining clarity, especially for complex concepts.

## Core Principles
- **Start Simple**: Write the simplest working solution first
- **Iterate Thoughtfully**: Add complexity only when needed
- **Be Idiomatic**: Follow language conventions
- **Test Everything**: All tests must pass before pushing code
- **Stay Autonomous**: When encountering failures, iterate on solutions independently

## Workspace Rules
- **Work Directory**: All development happens under `~/workspace/`
- **Project Structure**: Each project gets its own subdirectory (e.g., `~/workspace/project-name/`)
- **File Creation**: Use `mkdir -p` for directories, `touch` then Read() then Edit() for files
- **Navigation**: Use relative paths, avoid absolute paths
- **Restrictions**: Never create/edit files outside `~/workspace/`

## Development Workflow (Guidelines)
1. **Initialize Session**
   - Ask clarifying questions if needed
   - Create `~/workspace/JOURNAL.md` and update throughout session:
     ```bash
     echo "$(date -Iseconds) [INFO] Session started - <description>" >> ~/workspace/JOURNAL.md
     ```

2. **Setup Project**
   - Create GitHub repo with LICENSE and develop branch
   - Enable auto-merge: `gh repo edit --enable-auto-merge`
   - Clone to `~/workspace/` and checkout feature branch

3. **Build & Test Cycle**
   - Scaffold structure using language tools
   - Create unit tests for APIs first
   - Build APIs to pass tests
   - Create integration tests using `expect`/`tmux` for CLI/TUI testing
   - Build user interfaces
   - Iterate until all tests pass

4. **Finalize**
   - Commit with conventional commits
   - Push and create PR with description

## Journal Format
Append entries throughout session:
```bash
# Log format: timestamp [level] component - message
echo "$(date -Iseconds) [ERROR] Testing - Unit test failed: <details>" >> ~/workspace/JOURNAL.md
echo "$(date -Iseconds) [DECISION] Architecture - Chose <x> because <reason>" >> ~/workspace/JOURNAL.md
echo "$(date -Iseconds) [RESOLUTION] Bug - Fixed <issue> by <solution>" >> ~/workspace/JOURNAL.md
```

## Testing Strategy
- **Run tests individually** to avoid 2-minute timeouts
- **Test types**: Unit (language-specific), Integration (expect/tmux), User acceptance
- **User simulation**: Use expect/tmux to simulate real user interactions
- **Failure handling**: When tests fail, analyze → fix → rerun immediately. Repeat until resolved.

## Git Conventions

### Commits
Follow Conventional Commits:
```
<type>(<scope>): <subject>

<body>
```
Types: `feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `chore`

### Branches
- `feat/description` - New features
- `fix/issue-description` - Bug fixes
- `chore/description` - Maintenance

### Pull Requests
Include: Description, Type of Change, Testing checklist, Related issues

## Code Quality
- Descriptive naming following language conventions
- Comments for complex logic only
- Handle errors appropriately
- Prefer standard library over external dependencies when reasonable

## Documentation
Start with minimal README.md:
```markdown
# Project Name
Brief description

## Getting Started
### Installation
### Usage

## Development
### Testing
### Contributing

## License
```
Expand sections as project matures.

## Problem Solving
When encountering issues:
1. Analyze the error thoroughly
2. Implement a fix
3. Test immediately
4. If still failing, think deeper and try alternative approaches
5. Document significant decisions in journal
6. Continue iterating until successful

<!-- ENVIRONMENT_TOOLS_MARKER -->
<!-- This section will be automatically appended with language-specific guidelines -->
<!-- Do not edit below this line -->

---
*Note: Language-specific configurations and tooling preferences will be automatically appended below by the setup script.*
