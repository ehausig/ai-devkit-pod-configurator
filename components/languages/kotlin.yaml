id: KOTLIN
name: Kotlin
group: kotlin-version
requires: java-version
description: Modern programming language for JVM and Android development
version: "1.9.22"
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y zip unzip && \
        rm -rf /var/lib/apt/lists/* && \
        cd /tmp && \
        wget https://github.com/JetBrains/kotlin/releases/download/v1.9.22/kotlin-compiler-1.9.22.zip && \
        unzip kotlin-compiler-1.9.22.zip && \
        mv kotlinc /opt/kotlin && \
        rm kotlin-compiler-1.9.22.zip && \
        echo 'export PATH=/opt/kotlin/bin:$PATH' >> /etc/profile.d/kotlin.sh
  test_command: kotlinc -version
entrypoint_setup: |
  # Kotlin specific setup
  echo "Setting up Kotlin environment..."
  
  # Add Kotlin to PATH if not already present
  if ! grep -q "/opt/kotlin/bin" "$BASHRC" 2>/dev/null; then
      echo '' >> "$BASHRC"
      echo '# Kotlin environment' >> "$BASHRC"
      echo 'export PATH="/opt/kotlin/bin:$PATH"' >> "$BASHRC"
  fi
memory_content: |
  #### Kotlin
  
  **REPL & Scripts**:
  - Start REPL: `kotlinc`
  - Run script: `kotlin script.kts`
  - Compile & run: `kotlinc Hello.kt -include-runtime -d hello.jar && java -jar hello.jar`
  
  **Compilation**:
  - Compile to JAR: `kotlinc MyApp.kt -include-runtime -d myapp.jar`
  - Compile to class: `kotlinc MyApp.kt -d classes/`
  - With Java: `kotlinc MyApp.kt Java.java -d output/`
  
  **Kotlin Features**:
  - Null safety: `var name: String? = null`
  - Data classes: `data class Person(val name: String, val age: Int)`
  - Extension functions: `fun String.lastChar() = this[length - 1]`
  - Coroutines: Add kotlinx-coroutines for async
  
  **Unit Testing**:
  ```kotlin
  // Using JUnit 5 with Kotlin
  import org.junit.jupiter.api.Test
  import org.junit.jupiter.api.Assertions.*
  
  class ExampleTest {
      @Test
      fun `test something`() {
          assertEquals(4, 2 + 2)
      }
  }
  
  // Kotlin test DSL
  import kotlin.test.*
  
  class MyTest {
      @Test
      fun testExample() {
          assertTrue { 1 + 1 == 2 }
          assertFailsWith<IllegalArgumentException> {
              throwingFunction()
          }
      }
  }
  ```
  
  **API Development with Ktor**:
  ```kotlin
  // Quick API setup
  fun main() {
      embeddedServer(Netty, port = 8080) {
          routing {
              get("/") { call.respondText("Hello") }
              get("/api/users/{id}") {
                  val id = call.parameters["id"]
                  call.respond(User(id))
              }
          }
      }.start(wait = true)
  }
  ```
  
  **Testing with MockK**:
  ```kotlin
  // Mocking in Kotlin
  val mock = mockk<Service>()
  every { mock.getData() } returns "test data"
  
  // Verify calls
  verify { mock.getData() }
  ```
  
  **Common Gradle Setup**:
  ```kotlin
  // build.gradle.kts
  dependencies {
      implementation("io.ktor:ktor-server-netty:2.3.7")
      implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
      testImplementation(kotlin("test"))
      testImplementation("io.mockk:mockk:1.13.8")
  }
  ```
  
  **Development Tips**:
  - Use Gradle or Maven for dependency management
  - Enable null safety checks
  - Test coroutines with `runBlocking` in tests
  
  **Note**: For Android or complex projects, use Gradle (see Gradle section)
