id: PYTHON_3_11
name: Python 3.11 (Official)
group: python-version
requires: []
description: Official Python 3.11 release
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y python3.11 python3.11-venv python3-pip && \
        rm -rf /var/lib/apt/lists/* && \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
        update-alternatives --set python3 /usr/bin/python3.11 && \
        ln -sf /usr/bin/python3.11 /usr/bin/python
  test_command: python --version
entrypoint_setup: |
  # Python 3.11 specific setup
  echo "Setting up Python 3.11 environment..."
  
  # Configure pip for the devuser if proxy URL is provided
  if [ -n "$PIP_INDEX_URL" ]; then
      mkdir -p /home/devuser/.config/pip
      if [ ! -f /home/devuser/.config/pip/pip.conf ]; then
          echo "[global]" > /home/devuser/.config/pip/pip.conf
          echo "index-url = ${PIP_INDEX_URL}" >> /home/devuser/.config/pip/pip.conf
          echo "trusted-host = ${PIP_TRUSTED_HOST}" >> /home/devuser/.config/pip/pip.conf
          chown -R devuser:devuser /home/devuser/.config/pip
          echo "âœ“ Configured pip for devuser"
      fi
  fi
memory_content: |
  #### Python 3.11
  
  **What's New**:
  - Faster: 10-60% speedup vs 3.10
  - Better error messages with exact error locations
  - Exception groups: `except* ExceptionGroup`
  - Type hint improvements: `Self` type, `TypedDict` enhancements
  
  **Environment Setup**:
  - Create venv: `python -m venv .venv`
  - Activate: `source .venv/bin/activate`
  - Upgrade pip: `python -m pip install --upgrade pip`
  
  **Common TUI Development Stack**:
  ```bash
  # For Textual-based TUIs
  pip install textual textual-dev
  
  # For API integration
  pip install gql[aiohttp] aiohttp pydantic
  
  # Development tools
  pip install black ruff mypy pytest pytest-asyncio
  ```
  
  **Testing TUI Applications**:
  - Use expect scripts for automated testing
  - Create test fixtures for consistent state
  - Mock API calls during development
  
  **Virtual Environment Best Practices**:
  - Always use venv for projects: `python -m venv .venv`
  - Activate before installing: `source .venv/bin/activate`
  - Create requirements.txt: `pip freeze > requirements.txt`
  - Install from requirements: `pip install -r requirements.txt`
  
  **Development Tools**:
  - Type checking: `pip install mypy && mypy script.py`
  - Formatting: `pip install black && black .`
  - Linting: `pip install ruff && ruff check .`
