id: SCALA_3
name: Scala 3
group: scala-version
requires: java-version
description: Scala 3 (Dotty) - Next generation of Scala
version: "3.3.1"
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y wget unzip && \
        rm -rf /var/lib/apt/lists/* && \
        cd /tmp && \
        wget https://github.com/lampepfl/dotty/releases/download/3.3.1/scala3-3.3.1.zip && \
        unzip scala3-3.3.1.zip && \
        mv scala3-3.3.1 /opt/scala3 && \
        rm scala3-3.3.1.zip && \
        echo 'export PATH=/opt/scala3/bin:$PATH' >> /etc/profile.d/scala3.sh
  test_command: scala -version
entrypoint_setup: |
  # Scala 3 specific setup
  echo "Setting up Scala 3 environment..."
  
  # Add Scala 3 to PATH if not already present
  if ! grep -q "/opt/scala3/bin" "$BASHRC" 2>/dev/null; then
      echo '' >> "$BASHRC"
      echo '# Scala 3 environment' >> "$BASHRC"
      echo 'export PATH="/opt/scala3/bin:$PATH"' >> "$BASHRC"
  fi
memory_content: |
  #### Scala 3
  
  **New Syntax**:
  - Optional braces, `then` keyword
  - Union types: `String | Int`
  - Extension methods: `extension (x: Int) def twice = x * 2`
  - Enums: `enum Color { case Red, Green, Blue }`
  
  **REPL**: `scala` or `scala3`
  
  **Testing**:
  ```scala
  // ScalaTest
  class MySpec extends AnyFunSuite {
    test("addition") { assert(1 + 1 === 2) }
  }
  
  // MUnit (lightweight)
  class MySuite extends munit.FunSuite {
    test("example") { assertEquals(obtained, expected) }
  }
  ```
  
  **Quick Start**: Top-level definitions, given instances, export clauses
  
  **Build**: Use SBT (see SBT section)
