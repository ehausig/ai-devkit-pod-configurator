id: SCALA_3
name: Scala 3
group: scala-version
requires: java-version
description: Scala 3 (Dotty) - Next generation of Scala
version: "3.3.1"
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y wget unzip && \
        rm -rf /var/lib/apt/lists/* && \
        cd /tmp && \
        wget https://github.com/lampepfl/dotty/releases/download/3.3.1/scala3-3.3.1.zip && \
        unzip scala3-3.3.1.zip && \
        mv scala3-3.3.1 /opt/scala3 && \
        rm scala3-3.3.1.zip && \
        echo 'export PATH=/opt/scala3/bin:$PATH' >> /etc/profile.d/scala3.sh
  test_command: scala -version
entrypoint_setup: |
  # Scala 3 specific setup
  echo "Setting up Scala 3 environment..."
  
  # Add Scala 3 to PATH if not already present
  if ! grep -q "/opt/scala3/bin" "$BASHRC" 2>/dev/null; then
      echo '' >> "$BASHRC"
      echo '# Scala 3 environment' >> "$BASHRC"
      echo 'export PATH="/opt/scala3/bin:$PATH"' >> "$BASHRC"
  fi
memory_content: |
  #### Scala 3 (Dotty)
  
  **What's New**:
  - Cleaner syntax: Optional braces, `then` keyword
  - Union types: `String | Int`
  - Intersection types: `A & B`
  - Extension methods: `extension (x: Int) def twice = x * 2`
  - Enums: `enum Color { case Red, Green, Blue }`
  
  **REPL & Running**:
  - Start REPL: `scala` or `scala3`
  - Run file: `scala MyApp.scala`
  - Compile: `scalac MyApp.scala`
  
  **Unit Testing**:
  ```scala
  // ScalaTest example
  class MySpec extends AnyFunSuite {
    test("addition works") {
      assert(1 + 1 === 2)
    }
  }
  
  // MUnit (lightweight alternative)
  class MySuite extends munit.FunSuite {
    test("example") {
      assertEquals(obtained, expected)
    }
  }
  ```
  
  **Quick Examples**:
  ```scala
  // Top-level definitions
  def hello() = println("Hello Scala 3!")
  
  // Given instances (replacing implicits)
  given Int = 42
  
  // Export clauses
  export math.*
  ```
  
  **API Development**:
  - Consider http4s or Akka HTTP
  - Pattern matching enhanced for request routing
  - Union types great for error handling
  
  **Migration from Scala 2**:
  - Use `-source:3.0-migration` flag
  - Mix Scala 2/3 code with cross-compilation
  - Most Scala 2 libraries work with Scala 3
  
  **Build Tools**:
  - SBT is recommended (see SBT section)
  - Mill also supports Scala 3
  - Check dependency compatibility before adding
