id: RUBY_3_3
name: Ruby 3.3 (rbenv)
group: ruby-version
requires: []
description: Ruby 3.3.0 installed via rbenv
version: "3.3.0"
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y \
            rbenv \
            ruby-build \
            git \
            autoconf \
            bison \
            build-essential \
            libssl-dev \
            libyaml-dev \
            libreadline6-dev \
            zlib1g-dev \
            libncurses5-dev \
            libffi-dev \
            libgdbm6 \
            libgdbm-dev \
            libdb-dev \
            libsqlite3-dev && \
        rm -rf /var/lib/apt/lists/* && \
        # Update ruby-build to get latest Ruby versions
        git clone https://github.com/rbenv/ruby-build.git /tmp/ruby-build && \
        PREFIX=/usr/local /tmp/ruby-build/install.sh && \
        rm -rf /tmp/ruby-build && \
        # Now install Ruby 3.3.0
        rbenv install 3.3.0 && \
        rbenv global 3.3.0 && \
        eval "$(rbenv init -)" && \
        gem install bundler && \
        # Configure bundler for user installations
        mkdir -p /etc/skel/.bundle && \
        echo '---' > /etc/skel/.bundle/config && \
        echo 'BUNDLE_PATH: "~/.bundle"' >> /etc/skel/.bundle/config && \
        echo 'BUNDLE_BIN: "~/.local/bin"' >> /etc/skel/.bundle/config && \
        # Add Ruby paths to skeleton bashrc
        echo '' >> /etc/skel/.bashrc && \
        echo '# Ruby gem paths' >> /etc/skel/.bashrc && \
        echo 'export GEM_HOME="$HOME/.bundle"' >> /etc/skel/.bashrc && \
        echo 'export PATH="$HOME/.local/bin:$HOME/.bundle/bin:$PATH"' >> /etc/skel/.bashrc && \
        echo '' >> /etc/skel/.bashrc && \
        echo '# Initialize rbenv' >> /etc/skel/.bashrc && \
        echo 'eval "$(rbenv init -)"' >> /etc/skel/.bashrc
  nexus_config: |
    if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then \
        gem sources --remove https://rubygems.org/ && \
        gem sources --add ${NEXUS_APT_URL}/repository/rubygems-proxy/ && \
        echo "gem: --source ${NEXUS_APT_URL}/repository/rubygems-proxy/" > /etc/skel/.gemrc; \
    fi
  test_command: ruby --version
entrypoint_setup: |
  # Ruby 3.3 specific setup via rbenv
  echo "Setting up Ruby 3.3 environment..."
  
  # Configure bundler for devuser if Ruby is installed
  if command -v ruby &> /dev/null && command -v bundle &> /dev/null; then
      # Create .bundle directory for bundler config
      mkdir -p /home/devuser/.bundle
      
      # Configure bundler to install gems to user's home directory
      if [ ! -f /home/devuser/.bundle/config ]; then
          cat > /home/devuser/.bundle/config << 'EOF'
  ---
  BUNDLE_PATH: "/home/devuser/.bundle"
  BUNDLE_BIN: "/home/devuser/.local/bin"
  EOF
      fi
      
      # Ensure proper ownership
      chown -R devuser:devuser /home/devuser/.bundle
  fi
  
  # Add rbenv initialization and gem paths to .bashrc if not already present
  if ! grep -q "rbenv init" "$BASHRC" 2>/dev/null; then
      cat >> "$BASHRC" << 'EOF'
  
  # Initialize rbenv
  eval "$(rbenv init -)"
  
  # Ruby gem paths
  export GEM_HOME="$HOME/.bundle"
  export PATH="$HOME/.local/bin:$HOME/.bundle/bin:$PATH"
  EOF
  fi
memory_content: |
  #### Ruby 3.3 (via rbenv)
  
  **Ruby 3.3 Features**:
  - Prism parser (faster parsing)
  - YJIT improvements (better performance)
  - Range#overlap? method
  - Enhanced pattern matching
  
  **Project Setup**:
  - Initialize: `bundle init`
  - Add gem: `bundle add rails` or edit Gemfile
  - Install deps: `bundle install`
  - Execute: `bundle exec command`
  
  **Unit Testing**:
  ```ruby
  # RSpec (most popular)
  bundle add rspec --group=test
  bundle exec rspec --init
  
  # Run tests
  bundle exec rspec
  bundle exec rspec spec/models/user_spec.rb
  bundle exec rspec --format documentation
  ```
  
  **Minitest (Rails default)**:
  ```ruby
  # Run all tests
  bundle exec rake test
  bundle exec rails test
  
  # Specific test file
  bundle exec rails test test/models/user_test.rb
  ```
  
  **Rails Development**:
  - New app: `rails new myapp`
  - Server: `bin/rails server`
  - Console: `bin/rails console`
  - Generate: `bin/rails generate model User`
  - Migrate: `bin/rails db:migrate`
  
  **Development Tools**:
  - IRB console: `irb`
  - Check syntax: `ruby -c file.rb`
  - Rubocop: `bundle add rubocop --group=development`
  - Debug: `bundle add debug --group=development`
  
  **Testing Best Practices**:
  - Use Guard for continuous testing: `bundle add guard-rspec`
  - Factory Bot for test data: `bundle add factory_bot_rails`
  - SimpleCov for coverage: `bundle add simplecov`
  - Run tests immediately after changes
