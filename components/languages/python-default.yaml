id: PYTHON_DEFAULT
name: Python 3.10 (Ubuntu Default)
group: python-version
requires: ""
description: Ubuntu's default Python 3 installation
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y python3 python3-venv python3-pip python3-dev && \
        rm -rf /var/lib/apt/lists/* && \
        ln -sf /usr/bin/python3 /usr/bin/python
  test_command: python --version
entrypoint_setup: |
  # Python specific setup
  echo "Setting up Python environment..."
  
  # Configure pip for the devuser if proxy URL is provided
  if [ -n "$PIP_INDEX_URL" ]; then
      mkdir -p /home/devuser/.config/pip
      if [ ! -f /home/devuser/.config/pip/pip.conf ]; then
          echo "[global]" > /home/devuser/.config/pip/pip.conf
          echo "index-url = ${PIP_INDEX_URL}" >> /home/devuser/.config/pip/pip.conf
          echo "trusted-host = ${PIP_TRUSTED_HOST}" >> /home/devuser/.config/pip/pip.conf
          chown -R devuser:devuser /home/devuser/.config/pip
          echo "âœ“ Configured pip for devuser"
      fi
  fi
memory_content: |
  #### Python 3.10 (System)
  
  **Quick Start**:
  - Run Python: `python` or `python3`
  - Install packages: `pip install package` (installs to ~/.local)
  - Create virtual env: `python -m venv .venv`
  - Activate venv: `source .venv/bin/activate`
  
  **Virtual Environment Best Practices**:
  - Always use venv for projects
  - Create: `python -m venv .venv`
  - Activate: `source .venv/bin/activate`
  - Deactivate: `deactivate`
  - Requirements: `pip freeze > requirements.txt`
  
  **Unit Testing**:
  ```python
  # Using pytest (recommended)
  pip install pytest pytest-cov
  
  # test_example.py
  def test_function():
      assert function_under_test() == expected_value
  
  # Run tests
  pytest
  pytest -v  # verbose
  pytest --cov=mypackage  # with coverage
  ```
  
  **Built-in unittest**:
  ```python
  import unittest
  
  class TestExample(unittest.TestCase):
      def test_method(self):
          self.assertEqual(actual, expected)
  
  # Run: python -m unittest discover
  ```
  
  **Common Tasks**:
  - Run script: `python script.py`
  - Interactive mode: `python -i script.py`
  - Module mode: `python -m http.server 8000`
  - Type checking: `pip install mypy && mypy script.py`
  
  **Development Tools**:
  - Format code: `pip install black && black .`
  - Lint: `pip install ruff && ruff check .`
  - Debug: `python -m pdb script.py`
