id: JAVA_21_OPENJDK
name: Java 21 (OpenJDK)
group: java-version
requires: []
description: OpenJDK 21 - Open source Java implementation
installation:
  dockerfile: |
    RUN export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && \
        apt-get install -y openjdk-21-jdk && \
        rm -rf /var/lib/apt/lists/*
  env:
    - JAVA_HOME=/usr/lib/jvm/java-21-openjdk-${TARGETARCH}
  test_command: java -version
entrypoint_setup: |
  # Java 21 OpenJDK specific setup
  echo "Setting up Java 21 environment..."
  
  # Set JAVA_HOME for the user
  if ! grep -q "JAVA_HOME" "$BASHRC" 2>/dev/null; then
      echo '' >> "$BASHRC"
      echo '# Java environment' >> "$BASHRC"
      echo 'export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-'$(dpkg --print-architecture) >> "$BASHRC"
      echo 'export PATH="$JAVA_HOME/bin:$PATH"' >> "$BASHRC"
  fi
memory_content: |
  #### Java 21 (OpenJDK) - Latest LTS
  
  **Environment**:
  - Java version: `java -version`
  - JAVA_HOME: Pre-configured at `/usr/lib/jvm/java-21-openjdk-${TARGETARCH}`
  
  **Java 21 Features**:
  - Virtual threads: `Thread.ofVirtual().start(() -> {...})`
  - Pattern matching for switch: Enhanced with record patterns
  - Sequenced collections: New interfaces like `SequencedSet`
  - String templates (preview): `STR."Hello \{name}"`
  
  **Quick Start**:
  - Run single file: `java MyProgram.java`
  - With preview features: `java --enable-preview --source 21 MyProgram.java`
  - REPL: `jshell` for interactive Java
  
  **Unit Testing**:
  ```java
  // JUnit 5 with virtual threads
  @Test
  void testWithVirtualThreads() throws Exception {
      try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
          var future = executor.submit(() -> {
              // Test code runs in virtual thread
              return computeResult();
          });
          assertEquals(expected, future.get());
      }
  }
  ```
  
  **API Development Pattern**:
  ```java
  // Simple HTTP server with Java 21
  import com.sun.net.httpserver.*;
  
  var server = HttpServer.create(new InetSocketAddress(8080), 0);
  server.createContext("/api", exchange -> {
      var response = "{\"status\":\"ok\"}";
      exchange.getResponseHeaders().set("Content-Type", "application/json");
      exchange.sendResponseHeaders(200, response.length());
      try (var os = exchange.getResponseBody()) {
          os.write(response.getBytes());
      }
  });
  server.start();
  ```
  
  **Virtual Threads Best Practices**:
  - Use for I/O-bound operations
  - No pooling needed - create millions if needed
  - Avoid synchronized blocks in hot paths
  - Test with thousands of concurrent operations
  
  **Common Issues**:
  - Module conflicts: Use `--add-opens` if needed
  - Build tool versions: Update to latest for Java 21 support
  - Library compatibility: Most modern libraries support Java 21
