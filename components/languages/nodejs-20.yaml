# components/languages/nodejs-20.yaml
id: NODEJS_20
name: Node.js 20.18.0
group: nodejs-version
requires: []
description: Node.js JavaScript runtime with npm package manager
installation:
  dockerfile: |
    # Remove any existing Node.js installation
    RUN apt-get update && \
        apt-get remove -y nodejs npm libnode-dev && \
        apt-get autoremove -y && \
        rm -rf /usr/local/lib/node_modules && \
        rm -rf /usr/local/bin/node* && \
        rm -rf /usr/local/bin/npm*
    
    # Install Node.js 20.x (Claude Code requires Node.js 18+)
    # Direct binary installation to avoid repository issues with proxy
    RUN export DEBIAN_FRONTEND=noninteractive && \
        ARCH=$(dpkg --print-architecture) && \
        NODE_ARCH=${ARCH} && \
        if [ "${ARCH}" = "arm64" ]; then NODE_ARCH="arm64"; elif [ "${ARCH}" = "amd64" ]; then NODE_ARCH="x64"; fi && \
        NODE_VERSION="v20.18.0" && \
        wget -q https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz && \
        tar -xJf node-${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz -C /usr/local --strip-components=1 && \
        rm node-${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz && \
        npm install -g npm@latest
    
    # Configure npm if proxy URL is provided
    RUN if [ -n "$NPM_REGISTRY" ]; then \
            npm config set registry ${NPM_REGISTRY} && \
            echo "✓ Configured npm to use proxy" ; \
        fi
    
    # Set up user's npm configuration
    RUN mkdir -p /home/devuser/.npm-global && \
        chown -R devuser:devuser /home/devuser/.npm-global && \
        echo 'export PATH="$HOME/.local/bin:$HOME/.npm-global/bin:$PATH"' >> /home/devuser/.bashrc && \
        echo 'export NPM_CONFIG_PREFIX="$HOME/.npm-global"' >> /home/devuser/.bashrc
    
    # Configure npm for the devuser if proxy URL is provided
    RUN if [ -n "$NPM_REGISTRY" ]; then \
            echo "registry=${NPM_REGISTRY}" > /home/devuser/.npmrc && \
            echo "prefix=/home/devuser/.npm-global" >> /home/devuser/.npmrc && \
            chown devuser:devuser /home/devuser/.npmrc && \
            echo "✓ Configured npm for devuser" ; \
        else \
            echo "prefix=/home/devuser/.npm-global" > /home/devuser/.npmrc && \
            chown devuser:devuser /home/devuser/.npmrc ; \
        fi
    
    # Ensure npm paths are available for all users
    ENV NPM_CONFIG_PREFIX=/home/devuser/.npm-global
    ENV PATH="/home/devuser/.npm-global/bin:${PATH}"
  test_command: node --version && npm --version
entrypoint_setup: |
  # Node.js and npm specific setup
  echo "Setting up Node.js environment..."
  
  # Ensure npm global directory exists
  mkdir -p /home/devuser/.npm-global
  
  # Add npm paths to PATH if npm is available
  if command -v npm &> /dev/null; then
      if ! grep -q "npm-global/bin" "$BASHRC" 2>/dev/null; then
          echo '# Node.js and npm paths' >> "$BASHRC"
          echo 'export PATH="$HOME/.local/bin:$HOME/.npm-global/bin:$PATH"' >> "$BASHRC"
          echo 'export NPM_CONFIG_PREFIX="$HOME/.npm-global"' >> "$BASHRC"
      fi
  fi
  
  # Ensure proper ownership
  chown -R devuser:devuser /home/devuser/.npm-global 2>/dev/null || true
  
  # Preserve NPM environment variables for su command
  if [ "$(id -u)" = "0" ] && [ -n "$NPM_CONFIG_REGISTRY" ]; then
      # This will be included in the su command at the bottom of entrypoint
      export PRESERVE_NPM_CONFIG_REGISTRY="$NPM_CONFIG_REGISTRY"
  fi
memory_content: |
  #### Node.js 20.18.0 & npm
  
  **Node.js Usage**:
  - Run JavaScript: `node script.js`
  - Interactive REPL: `node`
  - Check version: `node --version`
  
  **npm (Node Package Manager)**:
  - Install package: `npm install package-name`
  - Install globally: `npm install -g package-name`
  - Install dev dependency: `npm install --save-dev package-name`
  - Initialize project: `npm init -y`
  - Run scripts: `npm run script-name`
  
  **Unit Testing**:
  ```javascript
  // Install testing tools
  npm install --save-dev jest supertest
  
  // package.json scripts
  {
    "scripts": {
      "test": "jest",
      "test:watch": "jest --watch",
      "test:coverage": "jest --coverage"
    }
  }
  ```
  
  **Common Development Patterns**:
  ```json
  {
    "scripts": {
      "dev": "nodemon server.js",
      "test": "jest",
      "test:watch": "jest --watch",
      "lint": "eslint .",
      "format": "prettier --write ."
    }
  }
  ```
  
  **Integration Testing**:
  - API testing with supertest
  - E2E testing with Playwright or Cypress
  - Use expect scripts for CLI tools
  
  **Best Practices**:
  - Use `package-lock.json` for reproducible installs
  - Check for vulnerabilities: `npm audit`
  - Run tests immediately: `npm test` after each feature
  - Use watch mode during development: `npm run test:watch`
