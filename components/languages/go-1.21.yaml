id: GO_1_21
name: Go 1.21
group: go-version
requires: []
description: Go programming language version 1.21
version: "1.21.6"
installation:
  dockerfile: |
    RUN ARCH=$(dpkg --print-architecture) && \
        GO_ARCH=${ARCH} && \
        if [ "${ARCH}" = "arm64" ]; then \
            GO_ARCH="arm64"; \
        elif [ "${ARCH}" = "amd64" ]; then \
            GO_ARCH="amd64"; \
        fi && \
        wget -q https://go.dev/dl/go1.21.6.linux-${GO_ARCH}.tar.gz && \
        tar -C /usr/local -xzf go1.21.6.linux-${GO_ARCH}.tar.gz && \
        rm go1.21.6.linux-${GO_ARCH}.tar.gz && \
        echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile.d/go.sh
  env:
    - GOPATH=/home/claude/go
    - PATH=/usr/local/go/bin:$PATH
  nexus_config: |
    if [ -n "$GOPROXY" ]; then \
        echo "export GOPROXY=$GOPROXY" >> /etc/profile.d/go.sh && \
        echo "export GOPRIVATE=" >> /etc/profile.d/go.sh && \
        echo "export GONOSUMDB=" >> /etc/profile.d/go.sh; \
    fi
  test_command: go version
entrypoint_setup: |
  # Go 1.21 specific setup
  echo "Setting up Go 1.21 environment..."
  
  # Create Go workspace directory
  mkdir -p /home/devuser/go/{bin,src,pkg}
  
  # Add Go environment to bashrc
  if ! grep -q "Go environment" "$BASHRC" 2>/dev/null; then
      echo '' >> "$BASHRC"
      echo '# Go environment' >> "$BASHRC"
      echo 'export GOPATH="$HOME/go"' >> "$BASHRC"
      echo 'export PATH="/usr/local/go/bin:$GOPATH/bin:$PATH"' >> "$BASHRC"
      # Add proxy settings if configured
      if [ -n "$GOPROXY" ]; then
          echo "export GOPROXY=\"$GOPROXY\"" >> "$BASHRC"
          echo 'export GOPRIVATE=""' >> "$BASHRC"
          echo 'export GONOSUMDB=""' >> "$BASHRC"
      fi
  fi
  
  # Ensure proper ownership
  chown -R devuser:devuser /home/devuser/go 2>/dev/null || true
memory_content: |
  #### Go 1.21
  
  **Project Setup**:
  - Initialize module: `go mod init github.com/user/project`
  - Get dependencies: `go get ./...`
  - Tidy modules: `go mod tidy`
  - Download deps: `go mod download`
  
  **Development**:
  - Run: `go run .` or `go run main.go`
  - Build: `go build -o myapp`
  - Format: `go fmt ./...`
  - Lint: `go vet ./...`
  
  **Go 1.21 Features**:
  - Built-in functions: `min()`, `max()`, `clear()`
  - Improved type inference
  - Profile-guided optimization: `go build -pgo=profile.pprof`
  
  **Unit Testing**:
  ```go
  func TestFunction(t *testing.T) {
      result := Function()
      if result != expected {
          t.Errorf("got %v, want %v", result, expected)
      }
  }
  
  // Table-driven tests
  func TestWithTable(t *testing.T) {
      tests := []struct {
          name string
          input int
          want int
      }{
          {"positive", 5, 10},
          {"zero", 0, 0},
          {"negative", -5, -10},
      }
      
      for _, tt := range tests {
          t.Run(tt.name, func(t *testing.T) {
              got := Double(tt.input)
              if got != tt.want {
                  t.Errorf("got %v, want %v", got, tt.want)
              }
          })
      }
  }
  ```
  
  **Testing Commands**:
  - Run all: `go test ./...`
  - Verbose: `go test -v ./...`
  - Coverage: `go test -cover ./...`
  - Race detector: `go test -race ./...`
  - Specific test: `go test -run TestName`
  
  **API Development**:
  ```go
  // Standard library HTTP server
  mux := http.NewServeMux()
  mux.HandleFunc("/api/health", func(w http.ResponseWriter, r *http.Request) {
      w.Header().Set("Content-Type", "application/json")
      w.Write([]byte(`{"status":"ok"}`))
  })
  http.ListenAndServe(":8080", mux)
  ```
  
  **Common Patterns**:
  - Error wrapping: Use `fmt.Errorf("context: %w", err)`
  - Context usage: Pass context.Context as first parameter
  - Graceful shutdown with signal handling
  
  **Tools**:
  - Install tools: `go install github.com/user/tool@latest`
  - Tools are installed to `~/go/bin` (in PATH)
  - Hot reload: `air` or `reflex` for development
