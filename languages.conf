# Language installation configurations
# Format: LANGUAGE_ID|DISPLAY_NAME|GROUP|REQUIRES|INSTALLATION_COMMANDS
# GROUP: Identifies the category (mutually exclusive groups end with -version)
# REQUIRES: Comma-separated list of required groups (e.g., scala requires java-version)

# Python versions (mutually exclusive)
# Note: Ubuntu 22.04 includes Python 3.10 by default
PYTHON_DEFAULT|Python 3.10 (System Default)|python-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y python3 python3-venv python3-pip python3-dev && rm -rf /var/lib/apt/lists/* && ln -sf /usr/bin/python3 /usr/bin/python
PYTHON_3_11|Python 3.11|python-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y python3.11 python3.11-venv python3-pip && rm -rf /var/lib/apt/lists/* && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && update-alternatives --set python3 /usr/bin/python3.11 && ln -sf /usr/bin/python3.11 /usr/bin/python

# Python tools (can be combined)
CONDA|Conda/Miniconda|python-tools||RUN ARCH=$(uname -m) && if [ "$ARCH" = "x86_64" ]; then MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"; elif [ "$ARCH" = "aarch64" ]; then MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh"; else echo "Unsupported architecture: $ARCH" && exit 1; fi && wget --quiet "$MINICONDA_URL" -O ~/miniconda.sh && /bin/bash ~/miniconda.sh -b -p /opt/conda && rm ~/miniconda.sh && /opt/conda/bin/conda clean -a -y && echo 'export PATH=/opt/conda/bin:$PATH' >> /etc/profile.d/conda.sh && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then echo "channels:" > /root/.condarc && echo "  - ${NEXUS_APT_URL}/repository/conda-forge-proxy/" >> /root/.condarc && echo "  - ${NEXUS_APT_URL}/repository/conda-proxy/" >> /root/.condarc && echo "ssl_verify: false" >> /root/.condarc && echo "channel_priority: strict" >> /root/.condarc && echo "show_channel_urls: true" >> /root/.condarc && echo "default_channels: []" >> /root/.condarc && cp /root/.condarc /opt/conda/.condarc; fi && echo 'if [ -f /opt/conda/bin/conda ]; then eval "$(/opt/conda/bin/conda shell.bash hook)"; fi' >> /etc/skel/.bashrc

# Rust versions (mutually exclusive)
RUST_STABLE|Rust (stable)|rust-version||RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | RUSTUP_HOME=/opt/rust CARGO_HOME=/opt/rust sh -s -- -y --no-modify-path --default-toolchain stable && chmod -R 755 /opt/rust && echo 'export PATH=/opt/rust/bin:$PATH' >> /etc/profile.d/rust.sh && echo 'export RUSTUP_HOME=/opt/rust' >> /etc/profile.d/rust.sh && echo 'export CARGO_HOME=$HOME/.cargo' >> /etc/profile.d/rust.sh && ln -s /opt/rust/bin/* /usr/local/bin/ && /opt/rust/bin/rustup default stable && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then mkdir -p /etc/skel/.cargo && echo '[source.crates-io]' > /etc/skel/.cargo/config.toml && echo 'replace-with = "nexus"' >> /etc/skel/.cargo/config.toml && echo '' >> /etc/skel/.cargo/config.toml && echo '[source.nexus]' >> /etc/skel/.cargo/config.toml && echo "registry = \"sparse+${NEXUS_APT_URL}/repository/cargo-proxy/\"" >> /etc/skel/.cargo/config.toml; fi
RUST_NIGHTLY|Rust (nightly)|rust-version||RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | RUSTUP_HOME=/opt/rust CARGO_HOME=/opt/rust sh -s -- -y --no-modify-path --default-toolchain nightly && chmod -R 755 /opt/rust && echo 'export PATH=/opt/rust/bin:$PATH' >> /etc/profile.d/rust.sh && echo 'export RUSTUP_HOME=/opt/rust' >> /etc/profile.d/rust.sh && echo 'export CARGO_HOME=$HOME/.cargo' >> /etc/profile.d/rust.sh && ln -s /opt/rust/bin/* /usr/local/bin/ && /opt/rust/bin/rustup default nightly && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then mkdir -p /etc/skel/.cargo && echo '[source.crates-io]' > /etc/skel/.cargo/config.toml && echo 'replace-with = "nexus"' >> /etc/skel/.cargo/config.toml && echo '' >> /etc/skel/.cargo/config.toml && echo '[source.nexus]' >> /etc/skel/.cargo/config.toml && echo "registry = \"sparse+${NEXUS_APT_URL}/repository/cargo-proxy/\"" >> /etc/skel/.cargo/config.toml; fi

# Go versions (mutually exclusive)
GO_1_21|Go 1.21|go-version||RUN ARCH=$(dpkg --print-architecture) && GO_ARCH=${ARCH} && if [ "${ARCH}" = "arm64" ]; then GO_ARCH="arm64"; elif [ "${ARCH}" = "amd64" ]; then GO_ARCH="amd64"; fi && wget -q https://go.dev/dl/go1.21.6.linux-${GO_ARCH}.tar.gz && tar -C /usr/local -xzf go1.21.6.linux-${GO_ARCH}.tar.gz && rm go1.21.6.linux-${GO_ARCH}.tar.gz && echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile.d/go.sh && if [ -n "$GOPROXY" ]; then echo "export GOPROXY=$GOPROXY" >> /etc/profile.d/go.sh && echo "export GOPRIVATE=" >> /etc/profile.d/go.sh && echo "export GONOSUMDB=" >> /etc/profile.d/go.sh; fi
GO_1_22|Go 1.22|go-version||RUN ARCH=$(dpkg --print-architecture) && GO_ARCH=${ARCH} && if [ "${ARCH}" = "arm64" ]; then GO_ARCH="arm64"; elif [ "${ARCH}" = "amd64" ]; then GO_ARCH="amd64"; fi && wget -q https://go.dev/dl/go1.22.0.linux-${GO_ARCH}.tar.gz && tar -C /usr/local -xzf go1.22.0.linux-${GO_ARCH}.tar.gz && rm go1.22.0.linux-${GO_ARCH}.tar.gz && echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile.d/go.sh && if [ -n "$GOPROXY" ]; then echo "export GOPROXY=$GOPROXY" >> /etc/profile.d/go.sh && echo "export GOPRIVATE=" >> /etc/profile.d/go.sh && echo "export GONOSUMDB=" >> /etc/profile.d/go.sh; fi

# Ruby versions (mutually exclusive)
RUBY_3_2|Ruby 3.2|ruby-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y ruby-full ruby-dev build-essential && rm -rf /var/lib/apt/lists/* && gem install bundler && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then gem sources --remove https://rubygems.org/ && gem sources --add ${NEXUS_APT_URL}/repository/rubygems-proxy/ && echo "gem: --source ${NEXUS_APT_URL}/repository/rubygems-proxy/" > /etc/skel/.gemrc; fi && mkdir -p /etc/skel/.bundle && echo '---' > /etc/skel/.bundle/config && echo 'BUNDLE_PATH: "~/.bundle"' >> /etc/skel/.bundle/config && echo 'BUNDLE_BIN: "~/.local/bin"' >> /etc/skel/.bundle/config && echo '' >> /etc/skel/.bashrc && echo '# Ruby gem paths' >> /etc/skel/.bashrc && echo 'export GEM_HOME="$HOME/.bundle"' >> /etc/skel/.bashrc && echo 'export PATH="$HOME/.local/bin:$HOME/.bundle/bin:$PATH"' >> /etc/skel/.bashrc
RUBY_3_3|Ruby 3.3 (via rbenv)|ruby-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y rbenv ruby-build && rm -rf /var/lib/apt/lists/* && rbenv install 3.3.0 && rbenv global 3.3.0 && gem install bundler && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then gem sources --remove https://rubygems.org/ && gem sources --add ${NEXUS_APT_URL}/repository/rubygems-proxy/ && echo "gem: --source ${NEXUS_APT_URL}/repository/rubygems-proxy/" > /etc/skel/.gemrc; fi && mkdir -p /etc/skel/.bundle && echo '---' > /etc/skel/.bundle/config && echo 'BUNDLE_PATH: "~/.bundle"' >> /etc/skel/.bundle/config && echo 'BUNDLE_BIN: "~/.local/bin"' >> /etc/skel/.bundle/config && echo '' >> /etc/skel/.bashrc && echo '# Ruby gem paths' >> /etc/skel/.bashrc && echo 'export GEM_HOME="$HOME/.bundle"' >> /etc/skel/.bashrc && echo 'export PATH="$HOME/.local/bin:$HOME/.bundle/bin:$PATH"' >> /etc/skel/.bashrc

# Java versions (mutually exclusive)
JAVA_11|Java 11 (OpenJDK)|java-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y openjdk-11-jdk && rm -rf /var/lib/apt/lists/*
JAVA_17|Java 17 (OpenJDK)|java-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y openjdk-17-jdk && rm -rf /var/lib/apt/lists/*
JAVA_21|Java 21 (OpenJDK)|java-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y openjdk-21-jdk && rm -rf /var/lib/apt/lists/*

# Java build tools (can be combined, require Java)
MAVEN|Maven (Java build tool)|java-tools|java-version|RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y maven && rm -rf /var/lib/apt/lists/* && mkdir -p /home/claude/.m2
GRADLE|Gradle (Java build tool)|java-tools|java-version|RUN wget https://services.gradle.org/distributions/gradle-8.5-bin.zip -O /tmp/gradle.zip && unzip /tmp/gradle.zip -d /opt && rm /tmp/gradle.zip && echo 'export PATH=/opt/gradle-8.5/bin:$PATH' >> /etc/profile.d/gradle.sh
SBT|SBT (Scala build tool)|java-tools|java-version|RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y apt-transport-https curl gnupg && echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list && echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list && curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add && apt-get update && apt-get install -y sbt && rm -rf /var/lib/apt/lists/* && if [ -n "$USE_NEXUS_APT" ] && [ -n "$NEXUS_APT_URL" ]; then mkdir -p /home/claude/.sbt && echo "[repositories]" > /home/claude/.sbt/repositories && echo "local" >> /home/claude/.sbt/repositories && echo "nexus: ${NEXUS_APT_URL}/repository/maven-public/, allowInsecureProtocol" >> /home/claude/.sbt/repositories && chown -R claude:claude /home/claude/.sbt; fi

# .NET versions (mutually exclusive)
DOTNET_6|.NET 6.0|dotnet-version||RUN wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb && export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y dotnet-sdk-6.0 && rm -rf /var/lib/apt/lists/*
DOTNET_8|.NET 8.0|dotnet-version||RUN wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb && export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y dotnet-sdk-8.0 && rm -rf /var/lib/apt/lists/*

# PHP versions (mutually exclusive)
PHP_8_2|PHP 8.2|php-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y php8.2 php8.2-cli php8.2-common php8.2-curl php8.2-mbstring php8.2-xml php8.2-zip && rm -rf /var/lib/apt/lists/*
PHP_8_3|PHP 8.3|php-version||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:ondrej/php && apt-get update && apt-get install -y php8.3 php8.3-cli php8.3-common php8.3-curl php8.3-mbstring php8.3-xml php8.3-zip && rm -rf /var/lib/apt/lists/*

# PHP tools
COMPOSER|Composer (PHP package manager)|php-tools|php-version|RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Standalone languages
ELIXIR|Elixir (with Erlang)|standalone||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y erlang elixir && rm -rf /var/lib/apt/lists/*
KOTLIN|Kotlin|standalone|java-version|RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y zip unzip && rm -rf /var/lib/apt/lists/* && cd /tmp && wget https://github.com/JetBrains/kotlin/releases/download/v1.9.22/kotlin-compiler-1.9.22.zip && unzip kotlin-compiler-1.9.22.zip && mv kotlinc /opt/kotlin && rm kotlin-compiler-1.9.22.zip && echo 'export PATH=/opt/kotlin/bin:$PATH' >> /etc/profile.d/kotlin.sh
SWIFT_5_9|Swift 5.9|standalone||RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y binutils git gnupg2 libc6-dev libcurl4-openssl-dev libedit2 libgcc-9-dev libpython3.8 libsqlite3-0 libstdc++-9-dev libxml2-dev libz3-dev pkg-config tzdata unzip zlib1g-dev && rm -rf /var/lib/apt/lists/* && wget https://download.swift.org/swift-5.9-release/ubuntu2204-aarch64/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu22.04-aarch64.tar.gz && tar xzf swift-5.9-RELEASE-ubuntu22.04-aarch64.tar.gz && mv swift-5.9-RELEASE-ubuntu22.04-aarch64 /usr/share/swift && echo 'export PATH=/usr/share/swift/usr/bin:$PATH' >> /etc/profile.d/swift.sh && rm swift-5.9-RELEASE-ubuntu22.04-aarch64.tar.gz

# Scala versions (mutually exclusive, require Java)
SCALA_2_13|Scala 2.13|scala-version|java-version|RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y wget && wget https://downloads.lightbend.com/scala/2.13.12/scala-2.13.12.deb && dpkg -i scala-2.13.12.deb && rm scala-2.13.12.deb && apt-get install -f -y && rm -rf /var/lib/apt/lists/*
SCALA_3|Scala 3|scala-version|java-version|RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y wget unzip && rm -rf /var/lib/apt/lists/* && cd /tmp && wget https://github.com/lampepfl/dotty/releases/download/3.3.1/scala3-3.3.1.zip && unzip scala3-3.3.1.zip && mv scala3-3.3.1 /opt/scala3 && rm scala3-3.3.1.zip && echo 'export PATH=/opt/scala3/bin:$PATH' >> /etc/profile.d/scala3.sh
